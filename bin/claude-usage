#!/usr/bin/env python3
# claude-usage - Minimal Claude Code usage tracker

import json
import os
from pathlib import Path
from datetime import datetime

# Model pricing (per million tokens)
PRICING = {
    'claude-opus-4-20250514': {'input': 15, 'output': 75, 'cache_create': 18.75, 'cache_read': 1.875},
    'claude-sonnet-4-20241022': {'input': 3, 'output': 15, 'cache_create': 3.75, 'cache_read': 0.375}
}

def main():
    claude_dir = Path.home() / '.claude' / 'projects'
    daily_usage = {}
    
    # Read all JSONL files
    for jsonl_file in claude_dir.glob('**/*.jsonl'):
        with open(jsonl_file, 'r') as f:
            for line in f:
                try:
                    data = json.loads(line)
                    if 'usage' in data.get('message', {}):
                        usage = data['message']['usage']
                        model = data['message'].get('model', 'unknown')
                        timestamp = data.get('timestamp', '')
                        
                        # Get date
                        date = timestamp[:10] if timestamp else 'unknown'
                        
                        # Initialize structures
                        if date not in daily_usage:
                            daily_usage[date] = {}
                        if model not in daily_usage[date]:
                            daily_usage[date][model] = {'input': 0, 'output': 0, 'cache_create': 0, 'cache_read': 0}
                        
                        # Add tokens
                        daily_usage[date][model]['input'] += usage.get('input_tokens', 0)
                        daily_usage[date][model]['output'] += usage.get('output_tokens', 0)
                        daily_usage[date][model]['cache_create'] += usage.get('cache_creation_input_tokens', 0)
                        daily_usage[date][model]['cache_read'] += usage.get('cache_read_input_tokens', 0)
                except:
                    continue
    
    # Calculate costs and display
    print("\nðŸ¤– Claude Usage Summary\n")
    total_cost = 0
    
    # Show last 7 days
    for date in sorted(daily_usage.keys())[-7:]:
        models = daily_usage[date]
        date_cost = 0
        date_tokens = 0
        
        for model, usage in models.items():
            if model in PRICING:
                prices = PRICING[model]
                cost = (usage['input'] * prices['input'] + 
                       usage['output'] * prices['output'] + 
                       usage['cache_create'] * prices['cache_create'] + 
                       usage['cache_read'] * prices['cache_read']) / 1_000_000
                
                date_cost += cost
                date_tokens += sum(usage.values())
        
        total_cost += date_cost
        print(f"{date}: {date_tokens:,} tokens | ${date_cost:.2f}")
    
    print(f"\nðŸ’° Total (last 7 days): ${total_cost:.2f}")

if __name__ == "__main__":
    main()