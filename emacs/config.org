#+TITLE: Sid's Emacs Configuration
#+AUTHOR: Sid Sarasvati
#+DESCRIPTION: A literate programming style Emacs configuration
#+STARTUP: overview
#+OPTIONS: toc:4 h:4

* Introduction

This is my personal Emacs configuration, built and maintained since 2012. I've converted it to a literate programming style to make it more maintainable and understandable for the future.

Literate programming allows me to:
- Document my configuration decisions
- Keep related code blocks together
- Provide context for why certain settings exist
- Make it easier to reorganize and refactor

** How it works

This file (=config.org=) contains all the configuration in organized sections. Emacs loads this file and evaluates the code blocks within it. The actual =.emacs= file just contains the code to load this configuration.

** Setup and Usage

To use this configuration:
1. Clone the dotfiles repository
2. Use GNU Stow to create the necessary symlinks
3. Launch Emacs

* Basic Settings and Bootstrap

** Debugging

We can enable error backtraces during startup for debugging purposes.

#+begin_src emacs-lisp
  ;;(setq debug-on-error t) ; get backtrace or errors
#+end_src

** Package Management

First, we need to set up the package system and initialize the package repositories.

#+begin_src emacs-lisp
  ;;------------------------------------------------------------------------------
  ;; Package Management: Package Listing and Auto Installation
  ;;-----------------------------------------------------------------------------
  ; list the packages you want
  (setq package-list '(yaml-mode cmake-mode))

  ; list the repositories containing them
  (setq package-archives '(("elpa" . "http://tromey.com/elpa/")
                           ("gnu" . "http://elpa.gnu.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("melpa" . "http://melpa.org/packages/")
                           ("marmalade" . "http://marmalade-repo.org/packages/")))

  ; activate all the packages (in particular autoloads)
  (package-initialize)

  ; fetch the list of packages available 
  (unless package-archive-contents
    (package-refresh-contents))

  ; install the missing packages - DOESN'T WORK!!
  (dolist (package package-list)
    (unless (package-installed-p package)
      (package-install package)))
#+end_src

** Load Path Configuration

Set the load path for custom libraries and packages.

#+begin_src emacs-lisp
  ;;------------------------------------------------------------------------------
  ;; Set Load Path (Should be first)
  ;;------------------------------------------------------------------------------
  (add-to-list 'load-path "~/.emacs.d/elisp")

  (let ((default-directory  "~/.emacs.d/elpa/"))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

** Basic Editor Configuration

Set some basic editor defaults for tabs, indentation, and key bindings.

#+begin_src emacs-lisp
  (setq default-tab-width 2)              ; Tab width = 2
  (setq-default indent-tabs-mode nil)     ; Tab inserts spaces only
  (setq mac-command-modifier 'meta)       ; Sets the command (Apple) key as Meta
#+end_src

* UI and Appearance

** Global UI Configuration

Configure the global UI elements and behavior.

#+begin_src emacs-lisp
  ;;------------------------------------------------
  ;; Global Emacs Config {
  ;;------------------------------------------------

  ;; load custom scripts 
  (load "scroll.el") ;; scrolling 
  (load "my-convenience.el") ;; key binding
  (load "gud.el") ;; lldb mode

  ;; Preferences                          *** ----------------------------
  (setq make-backup-files nil)            ;;; disable backup files
  (setq column-number-mode t)             ;;; Put column number in display
  (setq-default fill-column 80)           ;;; M-q to fill col; width set to 80
                                          ;;; -----------------------------
  ;; clang format
  ;; (require 'clang-format)

  ;; Change "yes or no" to "y or n"
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Mode Line Customization

Configure the status line (mode line) with the smart-mode-line package.

#+begin_src emacs-lisp
  ;; init smart-mode-line with powerline theme
  (require 'smart-mode-line)
  (setq sml/no-confirm-load-theme t)
  (setq sml/theme 'automatic)
  (sml/setup)
#+end_src

** Theme Configuration

Set up the Dracula theme for a pleasant dark mode experience.

#+begin_src emacs-lisp
  ;; my dark mode theme: dracula 
  (load-theme 'dracula t)
  ;;------------------------------------------------
  ;; Global Emacs Config }
  ;;------------------------------------------------
#+end_src

** GUI Elements

Configure GUI-specific elements like the toolbar and line numbers.

#+begin_src emacs-lisp
  ;; disable toolbar from GUI (THIS IS EMACS!)
  (tool-bar-mode -1)

  ;; turn line numbers on (left margin) - globally
  ;; Use display-line-numbers-mode (built-in since Emacs 26)
  ;; which is more efficient than the older linum-mode
  (when (version<= "26.0.50" emacs-version)
    (global-display-line-numbers-mode t))
#+end_src

** Highlight and Visual Enhancements

Configure visual enhancements like line highlighting.

#+begin_src emacs-lisp
  ;; set highlight color 10% darker default background
  (require 'color)
  (defun set-hl-line-color-based-on-theme ()
    "Sets the hl-line face to have no foregorund and a background
      that is 10% darker than the default face's background."
    (set-face-attribute 'hl-line nil
                        :foreground nil
                        :background (color-darken-name (face-background 'default) 10)))

  (add-hook 'global-hl-line-mode-hook 'set-hl-line-color-based-on-theme)

  (global-hl-line-mode t)
#+end_src

* Programming Modes

** Global Development Settings

Set up common development tools and settings that apply to all programming modes.

#+begin_src emacs-lisp
  ;;----------------------------------------------------------
  ;; GLOBAL DEV MODE SETUP {
  ;;----------------------------------------------------------

  ;; flycheck and linting settings (copied from web-mode setup)
  ;; ---------------------------------------------------------
  (require 'flycheck) ;; http://www.flycheck.org/manual/latest/index.html

  ;; turn on flychecking globally
  (add-hook 'after-init-hook #'global-flycheck-mode)

  ;; customize flycheck temp file prefix
  (setq-default flycheck-temp-prefix ".flycheck")

  ;;----------------------------------------------------------
  ;; } END GLOBAL DEV MODE ----------------------------------
  ;;----------------------------------------------------------
#+end_src

** C/C++ Mode

Configure settings for C and C++ development.

#+begin_src emacs-lisp
  ;;------------------------------------------------------------------------------
  ;; CC Mode
  ;;------------------------------------------------------------------------------
  (progn
    (load "cc-mode")
    (c-add-style "sid-cxx-style"
                 '((c-basic-offset . 4)
                   (c-tab-always-indent . nil)
                   (tab-width . 8)
                   (c-comment-only-line-offset . 0)
                   (c-offsets-alist . ((statement-block-intro . +)
                                       (knr-argdecl-intro . +)
                                       (substatement-open . 0)
                                       (label . 0)
                                       (statement-cont . +)
                                       (innamespce . 0)
                                       ))
                   ))


    ;; See also kc-c-mode-common-hook above.
    (defun kc-c-mode-hook ()
      (c-set-style "sid-cxx-style"))
    (add-hook 'c-mode-hook 'kc-c-mode-hook)

    ;; See also kc-c-mode-common-hook above.
    (defun kc-c++-mode-hook ()
      (c-set-style "sid-cxx-style")
      ;; Make ':' a symbol constituent char so that find-tag gets the right
      ;; default value.
      (modify-syntax-entry ?: "_"))
    (add-hook 'c++-mode-hook 'kc-c++-mode-hook))

  ;; experimenting with cc coding style
  ;; writing below the original code so that I only override and not omit
  (define-key c-mode-base-map (kbd "RET") 'newline-and-indent)
#+end_src

** Go Mode Configuration

Setup for the Go programming language.

#+begin_src emacs-lisp
  ;;----------------------------------------------------------
  ;; GOLANG DEVELOPMENT {
  ;;----------------------------------------------------------

  ;; from: https://github.com/dominikh/go-mode.el/blob/master/go-guru.el
  (require 'go-guru)

  ;; To enable identifier highlighting mode in a Go source buffer, use:
  (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode)

  ;; from
  ;; http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/
  (defun my-go-mode-hook ()
    ; Use goimports instead of go-fmt
    (setq gofmt-command "goimports")
    ; Call Gofmt before saving
    (add-hook 'before-save-hook 'gofmt-before-save)
    ; Customize compile command to run go build
    (if (not (string-match "go" compile-command))
        (set (make-local-variable 'compile-command)
             "go build -v && go test -v && go vet"))
    ; Godef jump key binding
    (local-set-key (kbd "M-.") 'godef-jump)
    (local-set-key (kbd "M-*") 'pop-tag-mark)
  )
  (add-hook 'go-mode-hook 'my-go-mode-hook)

  ;; autocomplete for go
  (defun auto-complete-for-go ()
    (auto-complete-mode 1))
  (add-hook 'go-mode-hook 'auto-complete-for-go)

  (with-eval-after-load 'go-mode
    (require 'go-autocomplete))

  ;;----------------------------------------------------------
  ;; } END GOLANG DEV ----------------------------------------
  ;;----------------------------------------------------------
#+end_src

** Web Development

Configure settings for web development, including JavaScript, HTML, CSS, and JSX.

#+begin_src emacs-lisp
  ;;----------------------------------------------------------
  ;; WEB DEVELOPMENT
  ;;----------------------------------------------------------
  (require 'web-mode)
  (setq js-indent-level 2)

  (setq web-mode-content-types-alist
        '(("jsx" . "\\.js[x]?\\'")))

  (add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.json\\'" . web-mode))


  ;; see http://web-mode.org/
  (defun my-web-mode-hook ()
    "Hooks for Web mode."

    ;; indents 
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-attr-indent-offset 2)

    ;; smartparens
    (setq web-mode-enable-auto-pairing nil)

    ;; key bindings
    (local-set-key (kbd "C-c C-v") 'browse-url-of-buffer)

    (add-hook 'local-write-file-hooks
              (lambda ()
                (delete-trailing-whitespace)
                nil))
  )
  (add-hook 'web-mode-hook  'my-web-mode-hook)

  ;; for better jsx syntax-highlighting in web-mode
  ;; - courtesy of Patrick @halbtuerke
  (defadvice web-mode-highlight-part (around tweak-jsx activate)
    (if (equal web-mode-content-type "jsx")
      (let ((web-mode-enable-part-face nil))
        ad-do-it)
      ad-do-it))

  ;; disable jshint since we prefer eslint checking
  (setq-default flycheck-disabled-checkers
    (append flycheck-disabled-checkers
            '(javascript-jshint)))

  ;; use eslint with web-mode for jsx files
  (flycheck-add-mode 'javascript-eslint 'web-mode)


  ;;---------------------------------------------------------
  ;; } End Web Development Settings--------------------------
  ;;---------------------------------------------------------
#+end_src

** File Type Associations

Configure various file types to use the appropriate major modes.

#+begin_src emacs-lisp
  ;;cmake-mode
  (require 'cmake-mode)
  (setq auto-mode-alist
        (append '(("CMakeLists\\.txt\\'" . cmake-mode)
                  ("\\.cmake\\'" . cmake-mode))
                auto-mode-alist))
  ;;dos mode
  (require 'dos)
  (add-to-list 'auto-mode-alist '("\\.bat\\'" . dos-mode))

  ;;yaml mode
  (require 'yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))

  ;; markdown mode
  (autoload 'markdown-mode "markdown-mode"
     "Major mode for editing Markdown files" t)
  (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
#+end_src

* Org Mode

Configure Org mode, one of Emacs' most powerful packages for notes, TODOs, and more.

#+begin_src emacs-lisp
  ;;----------------------------------------------------------
  ;; ORG MODE  {
  ;;----------------------------------------------------------

  ;; automaticaly sets web page title on link paste 
  (global-set-key (kbd "C-x p i") 'org-cliplink)  ;; TODO - change keys

  ;; ---- conveniences ---

  ;; global key activation, from https://orgmode.org/manual/Activation.html
  (bind-key (kbd "C-c l") 'org-store-link)
  (bind-key (kbd "C-c a") 'org-agenda)
  (bind-key (kbd "C-c c") 'org-capture)

  ;; TODO - not a fan of this anymore, remove.. 
  (with-eval-after-load 'org
    (bind-key "C-c k" 'org-cut-subtree org-mode-map)
    (setq org-yank-adjusted-subtrees t))

  ;; keybind for org-agenda with n option selected
  ;; (defun org-agenda-show-agenda-and-todo (&optional arg)
  ;;   (interactive "P")
  ;;   (org-agenda arg "n"))
  ;; (define-key org-mode-map (kbd "C-c C-a " 'org-agenda-show-agenda-and-todo))

  ;; Task Management {

  (setq org-todo-keywords
        '((sequence "TODO(t!)"
                    "STARTED(s!)"
                    "WAITING(w@/!)" "|" "DONE(x@/!)")))

  (setq org-log-done 'time)

  ;; Task  Management }

  ;; Agenda Setup
  (setq org-agenda-files (list "~/.org/life.org"
                               "~/.org/work.org"))

  ;; start week on weekend i.e saturday 
  (setq org-agenda-start-on-weekday 6)

  ;;----------------------------------------------------------
  ;; ORG MODE  }
  ;;----------------------------------------------------------
#+end_src

* Editor Enhancements

** Autopair

Configure autopair for automatic insertion of matching pairs of brackets, quotes, etc.

#+begin_src emacs-lisp
  ;; auto pair braces, quotes, brackets
  (require 'autopair)
  ;; disabling it, as this is more for pain then beign usefulc
  ;; (autopair-global-mode 1)
  (setq autopair-autowrap t)
#+end_src

** Whitespace Mode

Configure display of whitespace to maintain consistent code style.

#+begin_src emacs-lisp
  ;; whitespace-mode
  ;; highlight lines more than 80 chars
  ;; free of trailing whitespace and to use 80-column width, standard indentation
  (setq whitespace-style '(trailing lines space-before-tab
                                    indentation space-after-tab)
        whitespace-line-column 80)
  (global-whitespace-mode 1)
#+end_src

** Window Management

Functions for better window management.

#+begin_src emacs-lisp
  ;; someday might want to rotate windows if more than 2 of them
  (defun swap-windows () "If you have 2 windows, it swaps them."
    (interactive) (cond ((not (= (count-windows) 2))
                         (message "You need exactly 2 windows to do this."))
                        (t
                         (let* ((w1 (first (window-list)))
                                (W2 (second (window-list)))
                                (b1 (window-buffer w1))
                                (b2 (window-buffer w2))
                                (s1 (window-start w1))
                                (s2 (window-start w2)))
                           (set-window-buffer w1 b2)
                           (set-window-buffer w2 b1)
                           (set-window-start w1 s2)
                           (set-window-start w2 s1)))))

  ;;(global-set-key (kbd "M-2") 'swap-windows)
#+end_src

* Utility Functions

Add useful utility functions and hooks.

#+begin_src emacs-lisp
  ;;------------------------------------------------------------------------------
  ;; Hooks
  ;;------------------------------------------------------------------------------

  (add-hook 'diff-mode-hook '(lambda ()
                               (require 'ansi-color)
                               (ansi-color-apply-on-region
                                (point-min) (point-max))))

  ;;get rid of DOS EOL i.e annoying ^M
  (defun remove-dos-eol ()
    "Do not show ^M in files containing mixed UNIX and DOS line endings."
    (interactive)
    (setq buffer-display-table (make-display-table))
    (aset buffer-display-table ?\^M []))

  (add-hook 'diff-mode-hook 'remove-dos-eol)

  (add-hook 'yaml-mode-hook
                    (lambda ()
                           (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
  ;; enable upcase-region command (this uppercases the selection)
  (put 'upcase-region 'disabled nil)
  ;; enable narrow-to-region command (I forgot why/how I would use is
  (put 'narrow-to-region 'disabled nil)

  ;; Treat CamelCase words the same special way it treats lisp-case and
  ;; snake_case words.
  (add-hook 'prog-mode-hook 'subword-mode)
#+end_src

* Custom Variables

Emacs custom variables, managed by the Customize interface.

#+begin_src emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(custom-safe-themes
     '("a27c00821ccfd5a78b01e4f35dc056706dd9ede09a8b90c6955ae6a390eb1c1e" "c74e83f8aa4c78a121b52146eadb792c9facc5b1f02c917e3dbb454fca931223" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "d0fe9efeaf9bbb6f42ce08cd55be3f63d4dfcb87601a55e36c3421f2b5dc70f3" default))
   '(google-this-mode t)
   '(inhibit-startup-screen t)
   '(package-selected-packages
     '(counsel-jq json-mode typescript typescript-mode avy bind-key org-cliplink htmlize multiple-cursors restclient dracula-theme google-this go-autocomplete auto-complete govet go-mode markdown-mode kotlin-mode swift-mode command-log-mode eshell-bookmark docker-tramp docker-compose-mode yaml-mode web-mode smart-mode-line git-gutter-fringe flycheck exec-path-from-shell cmake-mode))
   '(send-mail-function 'mailclient-send-it))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+end_src